---
to: src/js/components/<%= h.inflection.pluralize(h.changeCase.lower(type)) %>/<%= h.changeCase.paramCase(name) %>/<%= h.changeCase.paramCase(name) %>.unit.spec.ts
---
import 'babel-polyfill';
import { build } from 'vuenit';

import { data } from './data/<%= h.changeCase.paramCase(name) %>.data';
import { <%= h.changeCase.pascal(name) %> } from './<%= h.changeCase.paramCase(name) %>';

describe('components', () => {
    describe('<%= h.inflection.pluralize(h.changeCase.lower(type)) %>', () => {
        describe('<%= h.changeCase.paramCase(name) %>', () => {

            const mount = build(<%= h.changeCase.pascal(name) %>, { props: {} });

            it('should render an <%= h.changeCase.pascal(name) %> component', () => {
                const vm = mount();
                expect(vm.$el).toBeDefined();
                vm.$destroy();
            });
        });

        Object.keys(data).forEach((key) => {

            describe(`<%= h.changeCase.paramCase(name) %> ${key} props`, () => {

                const props = data[key];
                const mount = build(<%= h.changeCase.pascal(name) %>, { props });

                it(`should render an <%= h.changeCase.pascal(name) %> component with ${key} props`, () => {
                    const vm = mount();
                    expect(vm.$el).toBeDefined();
                    vm.$destroy();
                });
            });
        });

    });
});
